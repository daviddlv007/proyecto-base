name: Cleanup Frontend Total

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: 'Nombre del bucket S3 a eliminar'
        required: true
      cloudfront_id:
        description: 'ID de la distribución CloudFront'
        required: true

permissions:
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Obtener configuración y ETag de CloudFront
        id: cf-config
        run: |
          DIST_ID="${{ github.event.inputs.cloudfront_id }}"
          aws cloudfront get-distribution-config --id $DIST_ID > dist-config.json
          ETag=$(aws cloudfront get-distribution-config --id $DIST_ID --query 'ETag' --output text)
          echo "DIST_ID=$DIST_ID" >> $GITHUB_ENV
          echo "ETAG=$ETag" >> $GITHUB_ENV

      - name: Deshabilitar distribución CloudFront
        run: |
          jq '.DistributionConfig.Enabled = false' dist-config.json > dist-config-disabled.json
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --distribution-config file://dist-config-disabled.json \
            --if-match $ETAG
          echo "Distribución deshabilitada. Esperando propagación..."
          sleep 60  # puede ajustarse según sea necesario

      - name: Eliminar distribución CloudFront
        run: |
          # Obtener el ETag actualizado antes de eliminar
          ETag=$(aws cloudfront get-distribution-config --id $DIST_ID --query 'ETag' --output text)
          aws cloudfront delete-distribution --id $DIST_ID --if-match $ETag
          echo "Distribución eliminada."

      - name: Vaciar bucket S3 (versiones incluidas)
        run: |
          BUCKET="${{ github.event.inputs.bucket_name }}"
          # Eliminar versiones si existe versioning
          VERSIONS=$(aws s3api list-object-versions --bucket $BUCKET --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output json)
          if [ "$VERSIONS" != '{"Objects":[]}' ]; then
            aws s3api delete-objects --bucket $BUCKET --delete "$VERSIONS"
          fi
          # Eliminar DeleteMarkers
          MARKERS=$(aws s3api list-object-versions --bucket $BUCKET --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' --output json)
          if [ "$MARKERS" != '{"Objects":[]}' ]; then
            aws s3api delete-objects --bucket $BUCKET --delete "$MARKERS"
          fi
          echo "Bucket vacío."

      - name: Eliminar bucket S3
        run: |
          aws s3api delete-bucket --bucket ${{ github.event.inputs.bucket_name }}
          echo "Bucket eliminado."

      - name: Recordatorio OAI
        run: |
          echo "Si quieres eliminar el OAI asociado, hazlo manualmente. AWS no permite borrarlo mientras existió una distribución que lo usó."
