name: CI/CD - Build, Push & Deploy Backend (prod)

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU & Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJECT_NAME="${{ github.repository }}"
            PROJECT="${PROJECT_NAME##*/}"
            REPO_DIR="/home/${{ secrets.EC2_USER }}/$PROJECT"

            if [ ! -d "$REPO_DIR/.git" ]; then
                git init "$REPO_DIR"
                cd "$REPO_DIR"
                git remote add origin https://x-access-token:${{ secrets.GHCR_TOKEN }}@github.com/${{ github.repository }}.git
                git fetch --depth=1 origin main
                git checkout main
            else
                cd "$REPO_DIR"
                git fetch --all
                git reset --hard origin/main
            fi

            cd "$REPO_DIR/infra/compose"

            BACKEND_IMAGE_FULL="${{ env.BACKEND_IMAGE }}:latest"
            echo ">>> Imagen backend a usar: $BACKEND_IMAGE_FULL"

            echo ">>> Login a GHCR"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo ">>> Crear volúmenes de Caddy si no existen"
            docker volume inspect caddy_data >/dev/null 2>&1 || docker volume create caddy_data
            docker volume inspect caddy_config >/dev/null 2>&1 || docker volume create caddy_config

            echo ">>> Deteniendo contenedores existentes"
            docker compose -f docker-compose.prod.yml down || true

            echo ">>> Levantar backend, DB y Caddy"
            docker compose -f docker-compose.prod.yml pull backend caddy
            docker compose -f docker-compose.prod.yml up -d db backend caddy

            echo ">>> Limpieza imágenes antiguas"
            docker image prune -af --filter 'until=24h' || true

            echo ">>> Estado backend:"
            docker inspect -f '{{.State.Health.Status}}' $(docker ps --filter ancestor=$BACKEND_IMAGE:latest --format '{{.Names}}' | head -n1) 2>/dev/null || echo "no-healthcheck"

            echo ">>> Deploy finalizado."
