name: CI/CD - Build, Push & Deploy (prod)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist/mi-app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download frontend build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist/mi-app

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            REPO_DIR="/home/${{ secrets.EC2_USER }}/proyecto-base"
            mkdir -p "$REPO_DIR/frontend/dist/mi-app"

            # Crear volúmenes con permisos correctos
            create_vol() {
              local vol="$1"
              docker volume inspect "$vol" >/dev/null 2>&1 || docker volume create "$vol"
              docker run --rm -v "$vol":/data alpine sh -c "\
                mkdir -p /data; \
                chown -R 1000:1000 /data; \
                chmod -R 755 /data; \
                sync"
            }

            create_vol static_volume
            create_vol media_volume
            create_vol caddy_data
            create_vol caddy_config

            # Copiar frontend build al volumen
            mkdir -p /tmp/frontend-build
            cp -a "$REPO_DIR/frontend/dist/mi-app/." /tmp/frontend-build/
            docker run --rm -v static_volume:/data alpine sh -c "\
              cp -a /tmp/frontend-build/. /data/; \
              chown -R 1000:1000 /data; \
              chmod -R 755 /data; \
              sync"

            # Generar archivo .env dinámico
            echo "BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}:latest" > "$REPO_DIR/.env"
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> "$REPO_DIR/.env"
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> "$REPO_DIR/.env"
            echo "DOMAIN=${{ secrets.DOMAIN }}" >> "$REPO_DIR/.env"

            # Detener contenedores antiguos y levantar nuevos
            docker compose -f "$REPO_DIR/infra/compose/docker-compose.prod.yml" down || true
            docker compose -f "$REPO_DIR/infra/compose/docker-compose.prod.yml" pull backend
            docker compose -f "$REPO_DIR/infra/compose/docker-compose.prod.yml" up -d db backend caddy

            # Limpieza de imágenes antiguas
            docker image prune -af --filter 'until=24h' || true

            # Verificar estado del backend
            docker inspect -f '{{.State.Health.Status}}' $(docker ps --filter ancestor=${{ env.BACKEND_IMAGE }}:latest --format '{{.Names}}' | head -n1) 2>/dev/null || echo "no-healthcheck"

            echo ">>> Deploy finalizado."
