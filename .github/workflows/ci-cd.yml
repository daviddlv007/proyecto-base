name: CI/CD - Build, Push & Deploy (prod)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/dist/mi-app

      - name: Set up QEMU & Buildx (for Docker)
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/dist/mi-app

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJECT_NAME="${{ github.repository }}"
            PROJECT="${PROJECT_NAME##*/}"
            REPO_DIR="/home/${{ secrets.EC2_USER }}/$PROJECT"

            echo "Directorio de despliegue: $REPO_DIR"

            # Crear carpeta de proyecto si no existe
            mkdir -p "$REPO_DIR/frontend/dist/mi-app"
            chown -R 1000:1000 "$REPO_DIR"

            # Copiar build frontend desde el artifact
            rsync -a ./frontend/dist/mi-app/ "$REPO_DIR/frontend/dist/mi-app/"

            cd "$REPO_DIR/infra/compose"

            BACKEND_IMAGE_FULL="${{ env.BACKEND_IMAGE }}:latest"
            echo ">>> Imagen backend a usar: $BACKEND_IMAGE_FULL"

            # Login GHCR en EC2
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Crear volúmenes y ajustar permisos
            for vol in static_volume media_volume caddy_data caddy_config; do
              docker volume inspect "$vol" >/dev/null 2>&1 || docker volume create "$vol"
              docker run --rm -v "$vol":/data alpine sh -c "chown -R 1000:1000 /data && chmod -R 755 /data && sync"
            done

            # Detener contenedores antiguos
            docker compose -f docker-compose.prod.yml down || true

            # Levantar servicios
            docker compose -f docker-compose.prod.yml pull backend
            docker compose -f docker-compose.prod.yml up -d db backend caddy

            # Limpiar imágenes antiguas
            docker image prune -af --filter 'until=24h' || true

            # Healthcheck backend
            docker inspect -f '{{.State.Health.Status}}' $(docker ps --filter ancestor=$BACKEND_IMAGE:latest --format '{{.Names}}' | head -n1) 2>/dev/null || echo "no-healthcheck"

            echo ">>> Deploy finalizado."
