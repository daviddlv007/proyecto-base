name: Deploy Backend

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Push Backend"]
    types:
      - completed

permissions:
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJECT_NAME="${{ github.repository }}"
            PROJECT="${PROJECT_NAME##*/}"
            REPO_DIR="/home/${{ secrets.EC2_USER }}/$PROJECT"

            echo "Directorio de despliegue: $REPO_DIR"

            # Crear carpeta y asegurar permisos correctos
            sudo mkdir -p "$REPO_DIR"
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} "$REPO_DIR"

            # Ejecutar todo como ec2-user
            sudo -i -u ${{ secrets.EC2_USER }} bash <<EOF
            set -euo pipefail

            cd "$REPO_DIR"

            # Clonar o actualizar repo
            if [ ! -d ".git" ]; then
                git clone https://x-access-token:${{ secrets.GHCR_TOKEN }}@github.com/${{ github.repository }}.git .
            else
                git fetch --all
                git reset --hard origin/main
            fi

            cd "infra/compose"

            # Generar archivo .env dinámico
            BACKEND_IMAGE_FULL="ghcr.io/${{ github.repository }}/backend:latest"
            echo "BACKEND_IMAGE=$BACKEND_IMAGE_FULL" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
            echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env

            echo ">>> Login a GHCR"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo ">>> Crear volúmenes si no existen"
            docker volume inspect static_volume >/dev/null 2>&1 || docker volume create static_volume
            docker volume inspect caddy_data >/dev/null 2>&1 || docker volume create caddy_data
            docker volume inspect caddy_config >/dev/null 2>&1 || docker volume create caddy_config

            echo ">>> Detener contenedores existentes"
            docker compose -f docker-compose.prod.yml down || true

            echo ">>> Levantar servicios con Docker Compose (db backend caddy)"
            docker compose -f docker-compose.prod.yml pull backend caddy
            docker compose -f docker-compose.prod.yml up -d db backend caddy

            echo ">>> Limpiar imágenes antiguas"
            docker image prune -af --filter 'until=24h' || true

            echo ">>> Estado backend:"
            docker inspect -f '{{.State.Health.Status}}' \$(docker ps --filter ancestor=\$BACKEND_IMAGE_FULL --format '{{.Names}}' | head -n1) 2>/dev/null || echo "no-healthcheck"

            echo ">>> Deploy finalizado."
            EOF
