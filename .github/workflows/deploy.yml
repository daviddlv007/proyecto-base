name: CI/CD - Deploy Backend (prod)

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJECT_NAME="daviddlv007/proyecto-base"
            PROJECT="${PROJECT_NAME##*/}"
            REPO_DIR="/home/***/$PROJECT"

            echo ">>> Directorio de despliegue: $REPO_DIR"

            # Crear carpeta y asegurar permisos correctos
            sudo mkdir -p "$REPO_DIR"
            sudo chown -R $USER:$USER "$REPO_DIR"

            # Ejecutar todo como usuario EC2
            sudo -i -u $USER bash <<EOF
            set -euo pipefail

            echo ">>> Entrando a $REPO_DIR"
            cd "$REPO_DIR"

            # Clonar o actualizar repo
            if [ ! -d ".git" ]; then
                echo ">>> Clonando repositorio..."
                git clone https://x-access-token:***@github.com/daviddlv007/proyecto-base.git .
            else
                echo ">>> Actualizando repositorio..."
                git fetch --all
                git reset --hard origin/main
            fi

            # Verificar que infra/compose existe
            if [ ! -d "infra/compose" ]; then
                echo "ERROR: infra/compose no existe"
                exit 1
            fi
            cd "infra/compose"

            # Generar archivo .env dinámico
            BACKEND_IMAGE_FULL="ghcr.io/daviddlv007/proyecto-base/backend:latest"
            echo ">>> Generando .env dinámico"
            echo "BACKEND_IMAGE=$BACKEND_IMAGE_FULL" > .env
            echo "POSTGRES_PASSWORD=***" >> .env
            echo "DJANGO_SECRET_KEY=***" >> .env
            echo "DOMAIN=***" >> .env

            # Login a GHCR
            echo ">>> Logueando a GHCR"
            echo "***" | docker login ghcr.io -u $USER --password-stdin

            # Crear volúmenes si no existen
            echo ">>> Creando volúmenes (si no existen)"
            for vol in static_volume caddy_data caddy_config; do
                docker volume inspect $vol >/dev/null 2>&1 || {
                    docker volume create $vol
                    echo "    - Volumen $vol creado"
                }
            done

            # Detener contenedores existentes
            echo ">>> Deteniendo contenedores existentes"
            docker compose -f docker-compose.prod.yml down || true

            # Levantar servicios
            echo ">>> Levantando servicios con Docker Compose"
            docker compose -f docker-compose.prod.yml pull backend caddy
            docker compose -f docker-compose.prod.yml up -d db backend caddy

            # Limpiar imágenes antiguas
            echo ">>> Limpiando imágenes antiguas"
            docker image prune -af --filter 'until=24h' || true

            # Estado backend
            echo ">>> Estado backend:"
            docker inspect -f '{{.State.Health.Status}}' \$(docker ps --filter ancestor=\$BACKEND_IMAGE_FULL --format '{{.Names}}' | head -n1) 2>/dev/null || echo "no-healthcheck"

            echo ">>> Deploy finalizado."
            EOF

