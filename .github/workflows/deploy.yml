name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      backend-image:
        required: true
        description: 'Backend Docker image to deploy'

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Descargar artefacto del frontend
      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-dist

      # 2️⃣ Deploy por SSH
      - name: Deploy via SSH to EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJECT_NAME="${{ github.repository }}"
            PROJECT="${PROJECT_NAME##*/}"
            REPO_DIR="/home/${{ secrets.EC2_USER }}/$PROJECT"

            echo "Directorio de despliegue: $REPO_DIR"

            # Crear carpetas y permisos
            sudo mkdir -p "$REPO_DIR/static_volume"
            sudo mkdir -p "$REPO_DIR/infra/compose"
            sudo chown -R 1000:1000 "$REPO_DIR"

            # Copiar frontend descargado al volumen de Caddy
            sudo rsync -a ./frontend-dist/browser/ "$REPO_DIR/static_volume/"

            cd "$REPO_DIR/infra/compose"

            BACKEND_IMAGE="${{ github.event.inputs.backend-image }}"
            echo ">>> Imagen backend a usar: $BACKEND_IMAGE"

            # Login GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Crear volúmenes y ajustar permisos
            for vol in static_volume media_volume caddy_data caddy_config; do
              docker volume inspect "$vol" >/dev/null 2>&1 || docker volume create "$vol"
              docker run --rm -v "$vol":/data alpine sh -c "chown -R 1000:1000 /data && chmod -R 755 /data && sync"
            done

            # Levantar servicios
            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml pull backend
            docker compose -f docker-compose.prod.yml up -d db backend caddy

            echo ">>> Deploy finalizado"
