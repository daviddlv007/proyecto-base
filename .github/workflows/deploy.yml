name: Deploy Backend

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Push Backend"]
    types:
      - completed

permissions:
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJECT_NAME="${{ github.repository }}"
            PROJECT="${PROJECT_NAME##*/}"
            REPO_DIR="/home/${{ secrets.EC2_USER }}/$PROJECT"

            # Aseguramos permisos
            sudo mkdir -p "$REPO_DIR"
            sudo chown -R $USER:$USER "$REPO_DIR"

            # Ejecutamos todo como ec2-user
            sudo -u $USER bash <<'EOF'
            cd "$REPO_DIR"

            if [ ! -d ".git" ]; then
                git clone https://x-access-token:${{ secrets.GHCR_TOKEN }}@github.com/${{ github.repository }}.git .
            else
                git fetch --all
                git reset --hard origin/main
            fi

            cd "infra/compose"

            BACKEND_IMAGE_FULL="ghcr.io/${{ github.repository }}/backend:latest"
            echo ">>> Imagen backend a usar: $BACKEND_IMAGE_FULL"

            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u $USER --password-stdin

            docker volume inspect caddy_data >/dev/null 2>&1 || docker volume create caddy_data
            docker volume inspect caddy_config >/dev/null 2>&1 || docker volume create caddy_config

            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml pull backend caddy
            docker compose -f docker-compose.prod.yml up -d db backend caddy

            docker image prune -af --filter 'until=24h' || true

            docker inspect -f '{{.State.Health.Status}}' $(docker ps --filter ancestor=$BACKEND_IMAGE_FULL --format '{{.Names}}' | head -n1) 2>/dev/null || echo "no-healthcheck"

            echo ">>> Deploy finalizado."
            EOF
